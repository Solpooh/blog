{
  "blocks": [
    {
      "key": "78v8f",
      "text": "우리는 WAS(Web Application Server)으로서 동작하는 Tomcat을 통해 원격프로그램을 실행시킬 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "4c1uq",
      "text": "Tomcat의 내부구조와 더불어 어떤 과정으로 동작하는 지 알아보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "b3dkm",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dvjic",
      "text": "로컬 프로그램의 실행",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "5u86n",
      "text": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}",
      "type": "code-block",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "b962s",
      "text": "그동안 우리는 다음과 같은 형식의 로컬 프로그램을 작성하였습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f3utr",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "4i4oc",
      "text": "IDE 내에서 또는 커맨드 라인에서 로컬 프로그램을 실행하면,",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "215cs",
      "text": "java는 java.exe(자바 인터프리터)를 통해 Main클래스에 있는 main()메서드를 호출합니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "6rnpp",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "106nh",
      "text": "Q. 그렇다면 자바 인터프리터가 main()을 바로 호출할 수 있는 이유가 무엇일까요?",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 48,
          "style": "CUSTOM_COLOR_BLUE"
        },
        {
          "offset": 0,
          "length": 48,
          "style": "CUSTOM_COLOR_RED"
        },
        {
          "offset": 0,
          "length": 48,
          "style": "CUSTOM_COLOR_PINK"
        },
        {
          "offset": 0,
          "length": 48,
          "style": "CUSTOM_COLOR_DEFAULT"
        },
        {
          "offset": 0,
          "length": 48,
          "style": "CUSTOM_BACKGROUND_RED"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "e0lee",
      "text": "=> static 메서드이기 때문입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 3,
          "length": 10,
          "style": "BOLD"
        },
        {
          "offset": 3,
          "length": 10,
          "style": "CUSTOM_COLOR_RED"
        },
        {
          "offset": 3,
          "length": 10,
          "style": "CUSTOM_COLOR_DEFAULT"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "amcoh",
      "text": "  즉, 객체를 생성할 필요없이 호출이 가능하다는 의미입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 5,
          "length": 19,
          "style": "BOLD"
        },
        {
          "offset": 5,
          "length": 19,
          "style": "CUSTOM_COLOR_RED"
        },
        {
          "offset": 5,
          "length": 19,
          "style": "CUSTOM_COLOR_DEFAULT"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "ch5c6",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9ei5v",
      "text": "원격 프로그램의 실행",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "7mmrc",
      "text": "그렇다면 남의 컴퓨터에 있는 프로그램. 즉, 원격 프로그램을 실행해보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "8cnjs",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2h90r",
      "text": "단순히 다음과 같은 과정을 따르면 됩니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "5j16g",
      "text": "프로그램 등록",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "bot72",
      "text": "URL과 프로그램 연결",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "93gsa",
      "text": "따라서 URL로 요청을 보낼 브라우저와 요청을 받아줄 Tomcat과 같은 'WAS'가 필요해집니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "81a6p",
      "text": "@Controller  // 1. 프로그램 등록\npublic class Hello {\n    @RequestMapping(\"/hello\") // 2. URL과 main()을 연결  \n    public void main() {\n        System.out.println(\"Hello\");\n    }\n}",
      "type": "code-block",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "p634",
      "text": "Q. static 메서드가 아닌 instance 메서드인데 호출이 가능한 이유가 무엇인가요?",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 51,
          "style": "CUSTOM_BACKGROUND_RED"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3j7hh",
      "text": "=> 톰캣이 내부적으로 객체를 생성해주기 때문입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 19,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f9j2b",
      "text": " 어떻게 생성해주는 것인지는 아래에서 배울 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 29,
          "style": "CUSTOM_COLOR_BLUE"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2vbr8",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f4nq4",
      "text": "Q. 그러면 굳이 instance 메서드로 사용하는 이유가 있나요?",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 37,
          "style": "CUSTOM_BACKGROUND_RED"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3h62q",
      "text": "=> static 메서드로 사용해도 문제가 없겠지만, Java에서 배운 것처럼 instance 메서드는 'iv와 cv를 둘 다 사용가능하다'는 장점이  있습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 43,
          "length": 35,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3egmh",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "31kko",
      "text": "Q. 만약 main 메서드의 접근제어자가 private이여도 호출이 가능할까요?",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 0,
          "length": 44,
          "style": "CUSTOM_BACKGROUND_RED"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "5ilru",
      "text": "=> @RequestMapping을 이용해 URL과 메서드를 연결했다는 말은 ",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "1r256",
      "text": " 메서드를 외부에서 호출이 가능하도록 한 것이므로 접근제어자와 상관없이 호출이 가능합니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 1,
          "length": 12,
          "style": "BOLD"
        },
        {
          "offset": 28,
          "length": 18,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "8ncji",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "634l7",
      "text": "어떻게 가능한 것인지 코드를 통해 알아보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "7oaq8",
      "text": "먼저 위에서 선언한 Hello 클래스의 main 메서드가  private 접근 제어자로 변경되었다고 가정하겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3qgd6",
      "text": "public class Main {\n    public static void main(String[] args) {\n        Hello hello = new Hello();\n        hello.main();\n    \n        // Reflection API 사용\n        1. Class helloClass = Class.forName(\"com.package.Hello\");\n        2. Hello hello = helloClass.newInstance(); \n        3. Method main = helloClass.getDeclaredMethod(\"main\");\n        4. main.setAccessible(true);\n\n        5. main.invoke(hello);\n    }\n}",
      "type": "code-block",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "ancsb",
      "text": "hello.main()은 private이라서 외부 호출이 불가능해졌기 때문에 사용할 수 없습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2md7r",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "1csot",
      "text": "대신에 클래스 정보를 얻고 다룰 수 있는 강력한 기능을 제공하는 Reflection API를 사용할 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 35,
          "length": 15,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2h9vd",
      "text": "Java에서는 java.lang.reflect 패키지를 제공합니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9fq1v",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f90d7",
      "text": "순서대로 코드를 한 줄씩 분석해보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dr8ga",
      "text": "Hello 클래스의 Class 객체(클래스의 정보를 담고 있는 객체)를 얻어옵니다.",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "cfuhf",
      "text": "Class 객체가 가진 정보를 통해 객체를 생성합니다.",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "40ps5",
      "text": "main 메서드에 대한 정보를 가져옵니다.",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2qgp5",
      "text": "private인 main 메서드의 호출을 가능하게 한다.",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9qfs9",
      "text": "hello.main()과 동일한 코드입니다.",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dkgm3",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "7bf5p",
      "text": "HttpServletRequest",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "6l5st",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "eshe0",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 0
        }
      ],
      "data": {}
    },
    {
      "key": "2a9kp",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "90dpk",
      "text": "그림과 같이 URL로 요청을 보내게 되면 Tomcat은 HttpServletRequest 객체를 만들고 요청한 정보를 모두 담습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2nh99",
      "text": "그리고 그 담은 것을 매개변수에 써준 request에 전달합니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "a6ur8",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3ck96",
      "text": "따라서 request를 이용하면 요청 정보들을 얻어오는 것이 가능해질 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "akcul",
      "text": "결론적으로 매개변수에 써주기만 하면 톰캣이 알아서 객체를 만들어주고 요청정보를 담아서 전달해줍니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 6,
          "length": 44,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3jp9q",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "7u0c5",
      "text": "HttpServletRequest의 메서드",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "85f3m",
      "text": "아래 그림을 통해 HttpServletRequest의 주요 메서드에 대해 알아보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "fi9i4",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "afchp",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 1
        }
      ],
      "data": {}
    },
    {
      "key": "7afm2",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "fie16",
      "text": "참고로 '?year=2021&month=10’와 같은 형태를 쿼리 스트링이라고 하며 서버로 값을 전달할 때 주로 사",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 34,
          "length": 6,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "5mh08",
      "text": "키와 값의 형태(Map)로 요청 정보에서 다음과 같이 원하는 정보를 추출할 수 있습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dkuns",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "1df8f",
      "text": "클라이언트와 서버",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "ab8dh",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "soc0",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 2
        }
      ],
      "data": {}
    },
    {
      "key": "bhv1r",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f1mfq",
      "text": "클라이언트(Client)는 서비스를 요청하는 애플리케이션.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 15,
          "length": 7,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dqmeq",
      "text": "서버(Server)는 서비스를 제공하는 애플리케이션 입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 12,
          "length": 7,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "fqv9p",
      "text": "(참고로 서버는 웹 서버뿐 아니라 파일 서버, 이메일 서버 등 다양한 서버가 존재합니다)",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9h7hp",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "co0dt",
      "text": "웹 프로그래밍을 어렵게 생각할 필요 없이, 브라우저가 요청을 통해 서버로 data를 보내면 서버는 받아서 원하는 형태로 처리/가공한 다음",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 24,
          "length": 48,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "drn18",
      "text": "그 결과를 Text문서. 즉, 문자열로 출력만 해주면 되는 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 17,
          "length": 7,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "cg8ho",
      "text": "브라우저는 최종적으로 출력내용을 해석해서 보여줍니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "16q8n",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "281lf",
      "text": "웹 애플리케이션 서버(WAS)란??",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "7ne12",
      "text": "앞에서 Tomcat을 웹 애플리케이션(WAS)라고 불렀는데, 그러면 WAS는 무슨 역할을 하는 것일까요??",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "818t1",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "2bbjr",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 3
        }
      ],
      "data": {}
    },
    {
      "key": "adt7j",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "nsd8",
      "text": "Web Application Server를 직역하면 'Application을 서비스한다'입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "fb27c",
      "text": "Application은 곧 프로그램을 의미하므로, WAS는 결국 서버에 프로그램을 설치해놓고 클라이언트는 이 프로그램을 사용할 수 있도록 해주는 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 36,
          "length": 12,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9st9p",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "5t87o",
      "text": "Tomcat의 내부 구조",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3icbe",
      "text": "그럼 Tomcat이 어떤 내부 구조를 통해 응답과정이 이루어지는지 알아보겠습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "3f57k",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "1o2fv",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 4
        }
      ],
      "data": {}
    },
    {
      "key": "atu2m",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "f5p7e",
      "text": "먼저 8080포트로 요청이 들어오면, Thread Pool에 미리 만들어져 대기하고 있는 쓰레드 중 하나가 받아서 처리하게 됩니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 21,
          "length": 37,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "alo73",
      "text": "그 후 요청 프로토콜에 해당하는 Connector가 연결이 됩니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "sg3h",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "4m190",
      "text": "그림과 같이 여러 개의 호스트를 한 개의 톰캣 서버에서 돌릴 수도 있습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "4fe3m",
      "text": "각각의 Context는 Web Application. 즉 하나의 프로젝트인데, 서로 간의 영향을 주지 않는 독립적인 공간에서 돌아갑니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 4,
          "length": 7,
          "style": "BOLD"
        },
        {
          "offset": 60,
          "length": 7,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "6097b",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "328ao",
      "text": "Context안에는 여러 개의 서블릿들이 있는데, Servlet에서 let은 ‘작다’라는 뜻입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "a2bec",
      "text": "Servlet은 작은 서버 프로그램이라고 볼 수 있는데, 마치 컨트롤러와 유사하다고 생각하면 됩니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 35,
          "length": 8,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "546bu",
      "text": "컨트롤러처럼 서블릿은 결과를 브라우저에 전달하는 것입니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "29jab",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "dsq9k",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9o5vc",
      "text": "Tomcat의 설정 파일 - server.xml, web.xml",
      "type": "blockquote",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9a9lf",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "1685m",
      "text": " ",
      "type": "atomic",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [
        {
          "offset": 0,
          "length": 1,
          "key": 5
        }
      ],
      "data": {}
    },
    {
      "key": "7i7qr",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "an2e5",
      "text": "Tomcat이 실행되면 공통 설정이 첫번째로 이루어지고 그 다음 순서로 개별 설정이 이루어집니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [
        {
          "offset": 13,
          "length": 5,
          "style": "BOLD"
        },
        {
          "offset": 40,
          "length": 5,
          "style": "BOLD"
        }
      ],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "qdg6",
      "text": "개별 설정이 공통 설정을 덮어쓸 수도 있습니다!! (ex. DispatcherServlet)",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9uqkj",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "4iggl",
      "text": "실제 server.xml 파일을 들여다보면 톰캣 내부 구조를 구성하는 태그들로 이루어져 있습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "6ktvg",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "bot83",
      "text": "원래는 web.xml(공통 설정)에서",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "6het1",
      "text": "서블릿 등록",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "9sa40",
      "text": "URL 연결",
      "type": "ordered-list-item",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "bc31k",
      "text": "이 과정을 전부 해야했지만, 일일히 해주는 것은 불편한 관계로 애너테이션(선택)으로 대체를 하고 있습니다. ",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "92k3h",
      "text": "1번은 @Controller로 2번은 @RequestMapping으로 대체할 수 있습니다.",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "ammih",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    },
    {
      "key": "bo1c4",
      "text": "",
      "type": "unstyled",
      "depth": 0,
      "inlineStyleRanges": [],
      "entityRanges": [],
      "data": {}
    }
  ]
}